### YamlMime:ManagedReference
items:
- uid: wan24.Data.CsvTable
  commentId: T:wan24.Data.CsvTable
  id: CsvTable
  parent: wan24.Data
  children:
  - wan24.Data.CsvTable.#ctor
  - wan24.Data.CsvTable.CountColumns
  - wan24.Data.CsvTable.CountRows
  - wan24.Data.CsvTable.Header
  - wan24.Data.CsvTable.Rows
  - wan24.Data.CsvTable.RX_NUMBER
  - wan24.Data.CsvTable.ToString(System.Boolean,System.Char,System.Nullable{System.Char})
  langs:
  - csharp
  - vb
  name: CsvTable
  nameWithType: CsvTable
  fullName: wan24.Data.CsvTable
  type: Class
  source:
    remote:
      path: CSV-Parser/CsvTable.cs
      branch: main
      repo: https://github.com/nd1012/CSV-Parser.git
    id: CsvTable
    path: ../CSV-Parser/CsvTable.cs
    startLine: 9
  assemblies:
  - csvparser
  namespace: wan24.Data
  summary: "\nCSV table\n"
  example: []
  syntax:
    content: public class CsvTable
    content.vb: Public Class CsvTable
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: wan24.Data.CsvTable.RX_NUMBER
  commentId: F:wan24.Data.CsvTable.RX_NUMBER
  id: RX_NUMBER
  parent: wan24.Data.CsvTable
  langs:
  - csharp
  - vb
  name: RX_NUMBER
  nameWithType: CsvTable.RX_NUMBER
  fullName: wan24.Data.CsvTable.RX_NUMBER
  type: Field
  source:
    remote:
      path: CSV-Parser/CsvTable.cs
      branch: main
      repo: https://github.com/nd1012/CSV-Parser.git
    id: RX_NUMBER
    path: ../CSV-Parser/CsvTable.cs
    startLine: 14
  assemblies:
  - csvparser
  namespace: wan24.Data
  summary: "\nRegular expression to match a numeric expression\n"
  example: []
  syntax:
    content: public static readonly Regex RX_NUMBER
    return:
      type: System.Text.RegularExpressions.Regex
    content.vb: Public Shared ReadOnly RX_NUMBER As Regex
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: wan24.Data.CsvTable.#ctor
  commentId: M:wan24.Data.CsvTable.#ctor
  id: '#ctor'
  parent: wan24.Data.CsvTable
  langs:
  - csharp
  - vb
  name: CsvTable()
  nameWithType: CsvTable.CsvTable()
  fullName: wan24.Data.CsvTable.CsvTable()
  type: Constructor
  source:
    remote:
      path: CSV-Parser/CsvTable.cs
      branch: main
      repo: https://github.com/nd1012/CSV-Parser.git
    id: .ctor
    path: ../CSV-Parser/CsvTable.cs
    startLine: 19
  assemblies:
  - csvparser
  namespace: wan24.Data
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public CsvTable()
    content.vb: Public Sub New
  overload: wan24.Data.CsvTable.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: wan24.Data.CsvTable.CountColumns
  commentId: P:wan24.Data.CsvTable.CountColumns
  id: CountColumns
  parent: wan24.Data.CsvTable
  langs:
  - csharp
  - vb
  name: CountColumns
  nameWithType: CsvTable.CountColumns
  fullName: wan24.Data.CsvTable.CountColumns
  type: Property
  source:
    remote:
      path: CSV-Parser/CsvTable.cs
      branch: main
      repo: https://github.com/nd1012/CSV-Parser.git
    id: CountColumns
    path: ../CSV-Parser/CsvTable.cs
    startLine: 24
  assemblies:
  - csvparser
  namespace: wan24.Data
  summary: "\nColumn count\n"
  example: []
  syntax:
    content: public int CountColumns { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property CountColumns As Integer
  overload: wan24.Data.CsvTable.CountColumns*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: wan24.Data.CsvTable.CountRows
  commentId: P:wan24.Data.CsvTable.CountRows
  id: CountRows
  parent: wan24.Data.CsvTable
  langs:
  - csharp
  - vb
  name: CountRows
  nameWithType: CsvTable.CountRows
  fullName: wan24.Data.CsvTable.CountRows
  type: Property
  source:
    remote:
      path: CSV-Parser/CsvTable.cs
      branch: main
      repo: https://github.com/nd1012/CSV-Parser.git
    id: CountRows
    path: ../CSV-Parser/CsvTable.cs
    startLine: 29
  assemblies:
  - csvparser
  namespace: wan24.Data
  summary: "\nRow count\n"
  example: []
  syntax:
    content: public int CountRows { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property CountRows As Integer
  overload: wan24.Data.CsvTable.CountRows*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: wan24.Data.CsvTable.Header
  commentId: P:wan24.Data.CsvTable.Header
  id: Header
  parent: wan24.Data.CsvTable
  langs:
  - csharp
  - vb
  name: Header
  nameWithType: CsvTable.Header
  fullName: wan24.Data.CsvTable.Header
  type: Property
  source:
    remote:
      path: CSV-Parser/CsvTable.cs
      branch: main
      repo: https://github.com/nd1012/CSV-Parser.git
    id: Header
    path: ../CSV-Parser/CsvTable.cs
    startLine: 34
  assemblies:
  - csvparser
  namespace: wan24.Data
  summary: "\nColumn headers\n"
  example: []
  syntax:
    content: public List<string> Header { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public ReadOnly Property Header As List(Of String)
  overload: wan24.Data.CsvTable.Header*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: wan24.Data.CsvTable.Rows
  commentId: P:wan24.Data.CsvTable.Rows
  id: Rows
  parent: wan24.Data.CsvTable
  langs:
  - csharp
  - vb
  name: Rows
  nameWithType: CsvTable.Rows
  fullName: wan24.Data.CsvTable.Rows
  type: Property
  source:
    remote:
      path: CSV-Parser/CsvTable.cs
      branch: main
      repo: https://github.com/nd1012/CSV-Parser.git
    id: Rows
    path: ../CSV-Parser/CsvTable.cs
    startLine: 39
  assemblies:
  - csvparser
  namespace: wan24.Data
  summary: "\nRows\n"
  example: []
  syntax:
    content: public List<string[]> Rows { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String[]}
    content.vb: Public ReadOnly Property Rows As List(Of String())
  overload: wan24.Data.CsvTable.Rows*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: wan24.Data.CsvTable.ToString(System.Boolean,System.Char,System.Nullable{System.Char})
  commentId: M:wan24.Data.CsvTable.ToString(System.Boolean,System.Char,System.Nullable{System.Char})
  id: ToString(System.Boolean,System.Char,System.Nullable{System.Char})
  parent: wan24.Data.CsvTable
  langs:
  - csharp
  - vb
  name: ToString(Boolean, Char, Nullable<Char>)
  nameWithType: CsvTable.ToString(Boolean, Char, Nullable<Char>)
  fullName: wan24.Data.CsvTable.ToString(System.Boolean, System.Char, System.Nullable<System.Char>)
  type: Method
  source:
    remote:
      path: CSV-Parser/CsvTable.cs
      branch: main
      repo: https://github.com/nd1012/CSV-Parser.git
    id: ToString
    path: ../CSV-Parser/CsvTable.cs
    startLine: 48
  assemblies:
  - csvparser
  namespace: wan24.Data
  summary: "\nGet CSV table data\n"
  example: []
  syntax:
    content: public string ToString(bool header, char fieldDelimiter = ',', char? stringDelimiter = '"')
    parameters:
    - id: header
      type: System.Boolean
      description: If to add the column headers as first row
    - id: fieldDelimiter
      type: System.Char
      description: Field delimiter
    - id: stringDelimiter
      type: System.Nullable{System.Char}
      description: String delimiter
    return:
      type: System.String
      description: CSV table data
    content.vb: Public Function ToString(header As Boolean, fieldDelimiter As Char = ","c, stringDelimiter As Char? = """"c) As String
  overload: wan24.Data.CsvTable.ToString*
  nameWithType.vb: CsvTable.ToString(Boolean, Char, Nullable(Of Char))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: wan24.Data.CsvTable.ToString(System.Boolean, System.Char, System.Nullable(Of System.Char))
  name.vb: ToString(Boolean, Char, Nullable(Of Char))
references:
- uid: wan24.Data
  commentId: N:wan24.Data
  name: wan24.Data
  nameWithType: wan24.Data
  fullName: wan24.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Text.RegularExpressions.Regex
  commentId: T:System.Text.RegularExpressions.Regex
  parent: System.Text.RegularExpressions
  isExternal: true
  name: Regex
  nameWithType: Regex
  fullName: System.Text.RegularExpressions.Regex
- uid: System.Text.RegularExpressions
  commentId: N:System.Text.RegularExpressions
  isExternal: true
  name: System.Text.RegularExpressions
  nameWithType: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
- uid: wan24.Data.CsvTable.#ctor*
  commentId: Overload:wan24.Data.CsvTable.#ctor
  name: CsvTable
  nameWithType: CsvTable.CsvTable
  fullName: wan24.Data.CsvTable.CsvTable
- uid: wan24.Data.CsvTable.CountColumns*
  commentId: Overload:wan24.Data.CsvTable.CountColumns
  name: CountColumns
  nameWithType: CsvTable.CountColumns
  fullName: wan24.Data.CsvTable.CountColumns
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: wan24.Data.CsvTable.CountRows*
  commentId: Overload:wan24.Data.CsvTable.CountRows
  name: CountRows
  nameWithType: CsvTable.CountRows
  fullName: wan24.Data.CsvTable.CountRows
- uid: wan24.Data.CsvTable.Header*
  commentId: Overload:wan24.Data.CsvTable.Header
  name: Header
  nameWithType: CsvTable.Header
  fullName: wan24.Data.CsvTable.Header
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: wan24.Data.CsvTable.Rows*
  commentId: Overload:wan24.Data.CsvTable.Rows
  name: Rows
  nameWithType: CsvTable.Rows
  fullName: wan24.Data.CsvTable.Rows
- uid: System.Collections.Generic.List{System.String[]}
  commentId: T:System.Collections.Generic.List{System.String[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String[]>
  nameWithType: List<String[]>
  fullName: System.Collections.Generic.List<System.String[]>
  nameWithType.vb: List(Of String())
  fullName.vb: System.Collections.Generic.List(Of System.String())
  name.vb: List(Of String())
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: wan24.Data.CsvTable.ToString*
  commentId: Overload:wan24.Data.CsvTable.ToString
  name: ToString
  nameWithType: CsvTable.ToString
  fullName: wan24.Data.CsvTable.ToString
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Nullable{System.Char}
  commentId: T:System.Nullable{System.Char}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Char>
  nameWithType: Nullable<Char>
  fullName: System.Nullable<System.Char>
  nameWithType.vb: Nullable(Of Char)
  fullName.vb: System.Nullable(Of System.Char)
  name.vb: Nullable(Of Char)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
